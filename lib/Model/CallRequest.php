<?php
/**
 * CallRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ubity API
 *
 * *** DISCLAMER *** The SDK is not support by Ubity. The Ubity API allows you to initiate calls, send text messages (SMS), retrieve call recordings, get a user's phone presence status, and a whole lot more!
 *
 * OpenAPI spec version: 1.0
 * Contact: dev@ubity.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CallRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enten' => 'int',
'number' => 'int',
'redirect' => 'string',
'cid_name' => 'string',
'cid_num' => 'int',
'autoanswer' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enten' => null,
'number' => 'int64',
'redirect' => null,
'cid_name' => null,
'cid_num' => 'int64',
'autoanswer' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enten' => 'enten',
'number' => 'number',
'redirect' => 'redirect',
'cid_name' => 'cid_name',
'cid_num' => 'cid_num',
'autoanswer' => 'autoanswer'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enten' => 'setEnten',
'number' => 'setNumber',
'redirect' => 'setRedirect',
'cid_name' => 'setCidName',
'cid_num' => 'setCidNum',
'autoanswer' => 'setAutoanswer'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enten' => 'getEnten',
'number' => 'getNumber',
'redirect' => 'getRedirect',
'cid_name' => 'getCidName',
'cid_num' => 'getCidNum',
'autoanswer' => 'getAutoanswer'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enten'] = isset($data['enten']) ? $data['enten'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['redirect'] = isset($data['redirect']) ? $data['redirect'] : null;
        $this->container['cid_name'] = isset($data['cid_name']) ? $data['cid_name'] : null;
        $this->container['cid_num'] = isset($data['cid_num']) ? $data['cid_num'] : null;
        $this->container['autoanswer'] = isset($data['autoanswer']) ? $data['autoanswer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enten
     *
     * @return int
     */
    public function getEnten()
    {
        return $this->container['enten'];
    }

    /**
     * Sets enten
     *
     * @param int $enten The extension or phone number of the user initiating the call (ie. 100)
     *
     * @return $this
     */
    public function setEnten($enten)
    {
        $this->container['enten'] = $enten;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number The extension or phone number to call (ie. 5145551212)
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return string
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param string $redirect The HTTP redirect code and URL that the API must answer (usefull from a web browser)
     *
     * @return $this
     */
    public function setRedirect($redirect)
    {
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets cid_name
     *
     * @return string
     */
    public function getCidName()
    {
        return $this->container['cid_name'];
    }

    /**
     * Sets cid_name
     *
     * @param string $cid_name Let override the default callerid name (you must specify a \"cid_num\" too)
     *
     * @return $this
     */
    public function setCidName($cid_name)
    {
        $this->container['cid_name'] = $cid_name;

        return $this;
    }

    /**
     * Gets cid_num
     *
     * @return int
     */
    public function getCidNum()
    {
        return $this->container['cid_num'];
    }

    /**
     * Sets cid_num
     *
     * @param int $cid_num Let overdide the default callerid number (you must own that number at Ubity)
     *
     * @return $this
     */
    public function setCidNum($cid_num)
    {
        $this->container['cid_num'] = $cid_num;

        return $this;
    }

    /**
     * Gets autoanswer
     *
     * @return bool
     */
    public function getAutoanswer()
    {
        return $this->container['autoanswer'];
    }

    /**
     * Sets autoanswer
     *
     * @param bool $autoanswer ('on' 'off' '1' or '0' The extension will autoanswer if 'on' or '1')
     *
     * @return $this
     */
    public function setAutoanswer($autoanswer)
    {
        $this->container['autoanswer'] = $autoanswer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
